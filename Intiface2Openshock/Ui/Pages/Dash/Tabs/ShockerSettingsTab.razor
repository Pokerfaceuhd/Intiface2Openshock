@inject ILogger<ShockerConnectionTab> Logger
@using LucHeart.WebsocketLibrary
@using Microsoft.Extensions.Logging
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using OpenShock.Desktop.ModuleBase.Config
@using Intiface2Openshock.Config
@using Intiface2Openshock.Services
@using OpenShock.Desktop.ModuleBase.Models

@page "/dash/settings"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">
    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudText>Shockers</MudText>
        <MudDivider/>
        <br/>

        <MudTable Elevation="0" Height="300px" T="Guid" Items="OpenShockService.Data.Hubs.Value.SelectMany(x => x.Shockers).Select(x => x.Id)" MultiSelection="true" Hover="true" @bind-SelectedItems="@_selectedShockers" @bind-SelectedItems:after="OnSelectedShockersUpdate">
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@OpenShockService.Data.Hubs.Value.SelectMany(x => x.Shockers).First(x => x.Id == context).Name</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
    <MudSelect T="ControlType" Variant="Variant.Outlined" @bind-Value="@ModuleConfig.Config.Shocker.Type" Label="Control Type" @bind-Value:after="SaveConfig">
        @foreach (var type in Enum.GetValues(typeof(ControlType)).Cast<ControlType>())
        {
            <MudSelectItem Value="@type">@type</MudSelectItem>
        }
    </MudSelect>
</MudPaper>

@code {
    
    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private IModuleConfig<Intiface2OpenshockConfig> ModuleConfig { get; set; } = null!;

    private HashSet<Guid> _selectedShockers = [];
    
    protected override async Task OnInitializedAsync()
    {
        _selectedShockers = [..ModuleConfig.Config.Shocker.Shockers];
    }

    private void OnSelectedShockersUpdate()
    {
        ModuleConfig.Config.Shocker.Shockers = _selectedShockers.ToList();
        ModuleConfig.SaveDeferred();
    }
    
    private void SaveConfig()
    {
        ModuleConfig.SaveDeferred();
    }
}