@inject ILogger<SerialTab> Logger
@using System.Reflection
@using LucHeart.WebsocketLibrary
@using Microsoft.Extensions.Logging
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.LocalRelay.Config
@using OpenShock.LocalRelay.Services
@implements IAsyncDisposable

@page "/dash/settings"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">
    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudText>Shockers</MudText>
        <MudDivider/>
        <br/>

        <MudTable Elevation="0" Height="300px" T="Guid" Items="OpenShockService.Data.Hubs.Value.SelectMany(x => x.Shockers).Select(x => x.Id)" MultiSelection="true" Hover="true" @bind-SelectedItems="@_selectedShockers" @bind-SelectedItems:after="OnSelectedShockersUpdate">
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@OpenShockService.Data.Hubs.Value.SelectMany(x => x.Shockers).First(x => x.Id == context).Name</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
    <div>
        <MudIcon Color="GetConnectionStateColor(FlowManager.State.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
        @FlowManager.State.Value
    </div>

</MudPaper>

@code {
    
    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private IModuleConfig<Intiface2OpenshockConfig> ModuleConfig { get; set; } = null!;

    private HashSet<Guid> _selectedShockers = [];
    
    private IAsyncDisposable _flowUpdatedSubscription = null!;

    protected override async Task OnInitializedAsync()
    {
        _selectedShockers = [..ModuleConfig.Config.Shocker.Shockers];
        _flowUpdatedSubscription = await FlowManager.State.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
    }

    private void OnSelectedShockersUpdate()
    {
        ModuleConfig.Config.Shocker.Shockers = _selectedShockers.ToList();
        ModuleConfig.SaveDeferred();
    }
    
    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };
    
    public async ValueTask DisposeAsync()
    {
        await _flowUpdatedSubscription.DisposeAsync();
    }

}